AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazom EKS Sample Elb - application load balancer'

Mappings:
  RegionMap:
    ap-southeast-2:
      HVM64: ami-0970010f37c4f9c8d
      XXX: 123

Parameters:
  # Vpc:
  #   Type: String
  #   Default: vpc-0a9ba350c968f334b
  #   Description: 'Vpc in which the load balancer will be created'
  # PublicSubnet01:
  #   Type: String
  #   Default: subnet-0791b383603113a4f
  #   Description: Public subnet the load blanacer will be created in
  # PublicSubnet02:
  #   Type: String
  #   Default: subnet-02f87284b20063d80
  #   Description: Public subnet the load blanacer will be created in
  # SecurityGroupForHttpAccess:
  #   Type: String
  #   Default: sg-0aca3d601a96c617b
  #   Description: Security group that allows http access
  VpcStackName:
    Type: String
    Default: eks-vpc
    Description: The stack that creates the vpc for this elb
  # Ec2Instance01:
  #   Type: String
  #   Default: i-007814eb8305e2255
  #   Description: 'ec2 instance for the load balancer'
  Ec2InstanceSize:
    Type: String
    Default: t2.micro
    Description: The instance size for the ec2 instance.
  KeyName01:
    Type: AWS::EC2::KeyPair::KeyName
    Default: iplusnz-1
    Description: The key pair used to connect to ec2 instances
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    # AllowedValues:
    #   - subnet-0791b383603113a4f
    #   - subnet-02f87284b20063d80
      # - Fn::ImportValue:
      #     Fn::Sub: '${VpcStackName}-PublicSubnet01'
      # - Fn::ImportValue:
      #     Fn::Sub: '${VpcStackName}-PublicSubnet02'
    Description: The subnet in which ec2 instances will be created

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-PublicSubnet01'
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-PublicSubnet02'
      SecurityGroups:
        - Fn::ImportValue: 
            Fn::Sub: '${VpcStackName}-HttpAccessSecurityGroupID'
      Tags:
        - Key: Name
          Value: alb-for-eks
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: '30'
      HealthCheckTimeoutSeconds: '5'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      Protocol: HTTP
      Port: '80'
      TargetType: instance
      VpcId: 
        Fn::ImportValue: 
          Fn::Sub: '${VpcStackName}-VpcID'
      Targets:
        - Id: 
            Ref: EC2InstanceHttpServer01
          Port: '80'

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - ApplicationLoadBalancer
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: TargetGroup
      LoadBalancerArn: 
        Ref: ApplicationLoadBalancer
      Protocol: HTTP
      Port: '80'

  EC2InstanceHttpServer01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - Ref:
              AWS::Region
          - HVM64
      InstanceType: 
        Ref: Ec2InstanceSize
      # This should be in a private subnet. But because no NAT gateway is avavilable, so using a public subnet here.
      SubnetId:
        Ref: PublicSubnet 
      SecurityGroupIds:
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-HttpAccessInternalSecurityGroupID'
      KeyName: 
        Ref: KeyName01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install httpd -y
          curl http://169.254.169.254/latest/meta-data/instance-id > /var/www/html/index.html
          chkconfig httpd on
          service httpd start

  EC2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true # should be false behind an alb
      EbsOptimized: false
      ImageId: 
        Fn::FindInMap:
          - RegionMap
          - Ref:
              AWS::Region
          - HVM64
      InstanceType: 
        Ref: Ec2InstanceSize
      KeyName: 
        Ref: KeyName01
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-HttpAccessInternalSecurityGroupID'
      InstanceMonitoring: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install httpd -y
          curl http://169.254.169.254/latest/meta-data/instance-id > /var/www/html/index.html
          chkconfig httpd on
          service httpd start
 
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: 
          Fn::FindInMap:
            - RegionMap
            - Ref:
                AWS::Region
            - HVM64
        InstanceType: 
          Ref: Ec2InstanceSize
        KeyName: 
          Ref: KeyName01
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: '${VpcStackName}-HttpAccessInternalSecurityGroupID'
        Monitoring: 
          Enabled: false
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install httpd -y
            curl http://169.254.169.254/latest/meta-data/instance-id > /var/www/html/index.html
            chkconfig httpd on
            service httpd start

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - Fn::Select:
            - '0'
            - Fn::GetAZs:
                Ref: AWS::Region
        - Fn::Select:
            - '1'
            - Fn::GetAZs:
                Ref: AWS::Region
      LaunchTemplate:
        LaunchTemplateId: 
          Ref: EC2LaunchTemplate
        Version: 
          Fn::GetAtt: 
            - EC2LaunchTemplate
            - LatestVersionNumber
      MaxSize: 4
      MinSize: 2
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-PublicSubnet01'
        - Fn::ImportValue:
            Fn::Sub: '${VpcStackName}-PublicSubnet02'

Outputs:
  EC2LaunchConfiguration:
    Description: The launch configuration for the autoscaling group
    Value:
      Ref: EC2LaunchConfiguration
  EC2LaunchTemplate:
    Description: The launch template for the autoscaling group
    Value: 
      Ref: EC2LaunchTemplate

